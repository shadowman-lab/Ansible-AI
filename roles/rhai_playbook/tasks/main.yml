---

- name: Send POST request using uri module to create playbook
  ansible.builtin.uri:
    url: "{{ ai_url }}/v1/completions"
    method: POST
    headers:
      accept: "application/json"
      Content-Type: "application/json"
      Authorization: "Bearer {{ api_token }}"
    body:
      prompt: 'You are a technical expert specializing in Ansible and RHEL and your job  is to carefully follow the given instructions to generate the required playbook
        * make sure to apply those restriction and follow them directly and dont skip any of them:
        output with no introduction, no explaintation, only code
        DONT MAKE ANY MISTAKES, check if you did any
        only return ansible code in yaml, without, the yaml code snippet and nothing else.
        no DOCUMENATION IN THE OUTPUT: {{ lightspeed_prompt }} on host {{ vm_name }}'
      max_tokens: "{{ max_tokens | default('500') }}"
      model: "{{ ai_model }}"
    body_format: json
    return_content: true
    status_code: 200
    timeout: 60
  register: responseplaybook

- name: Sync with Gitrepo
  ansible.builtin.git:
    repo: git@github.com:shadowman-lab/Ansible-AI.git
    dest: /tmp/home/ai
    version: main
    accept_newhostkey: true
    key_file: "{{ cert_key_file }}"
  delegate_to: localhost
  run_once: true

- name: Save formatted YAML response to file
  ansible.builtin.copy:
    content: "{{ responseplaybook.json.choices[0].text }}"
    dest: "/tmp/home/ai/lightspeed-response.yml"
    mode: '0644'

- name: Make sure yaml isn't there
  ansible.builtin.lineinfile:
    path: /tmp/home/ai/lightspeed-response.yml
    state: absent
    regexp: "```yaml"

- name: Make sure code lines aren't there
  ansible.builtin.lineinfile:
    path: /tmp/home/ai/lightspeed-response.yml
    state: absent
    regexp: "```"

- name: Make sure dashes aren't there
  ansible.builtin.lineinfile:
    path: /tmp/home/ai/lightspeed-response.yml
    state: absent
    regexp: "---"

- name: Update git repo with resolution playbook
  ansible.builtin.shell: git add -A && git commit -m "Synching new Lightspeed playbook" && git config --global core.sshCommand 'ssh -i {{ cert_key_file }} -F /dev/null'
    && git push
  args:
    chdir: /tmp/home/ai
  environment:
    GIT_COMMITTER_NAME: "{{ git_name | default(omit) }}"
    GIT_COMMITTER_EMAIL: "{{ git_email | default(omit) }}"
    GIT_AUTHOR_NAME: "{{ git_name | default(omit) }}"
    GIT_AUTHOR_EMAIL: "{{ git_email | default(omit) }}"
  run_once: true
  register: gitresult
  failed_when: gitresult.rc > 1
  changed_when: gitresult.rc == 0
